interface ChatMessageProps {
  message: string;
  isUser: boolean;
  timestamp?: string;
}

const ChatMessage = ({ message, isUser, timestamp }: ChatMessageProps) => {
  // –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
  const formatMessage = (text: string) => {
    return text
      .split('\n')
      .map((line, index) => {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        if (line.startsWith('**') && line.endsWith('**')) {
          return <strong key={index} className="font-semibold">{line.slice(2, -2)}</strong>;
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–æ–≤
        if (line.startsWith('‚Ä¢ ')) {
          return <li key={index} className="ml-4">{line.slice(2)}</li>;
        }
        if (line.startsWith('1. ')) {
          return <li key={index} className="ml-4">{line.slice(3)}</li>;
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º–æ–¥–∑–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        if (line.includes('üéØ') || line.includes('üí™') || line.includes('üìê') || line.includes('üî∑')) {
          return <span key={index}>{line}</span>;
        }
        // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        return <span key={index}>{line}</span>;
      });
  };

  return (
    <div className={`flex ${isUser ? "justify-end" : "justify-start"} mb-4`}>
      <div className={`chat-message ${isUser ? "chat-user" : "chat-ai"}`}>
        <div className="text-sm leading-relaxed space-y-1">
          {formatMessage(message)}
        </div>
        {timestamp && (
          <p className="text-xs opacity-70 mt-2">
            {new Date(timestamp).toLocaleTimeString()}
          </p>
        )}
      </div>
    </div>
  );
};

export default ChatMessage;